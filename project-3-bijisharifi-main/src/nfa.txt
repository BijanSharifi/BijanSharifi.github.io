open List
open Sets

(*********)
(* Types *)
(*********)

type ('q, 's) transition = 'q * 's option * 'q

type ('q, 's) nfa_t = {
  sigma: 's list;
  qs: 'q list;
  q0: 'q;
  fs: 'q list;
  delta: ('q, 's) transition list;
}

(***********)
(* Utility *)
(***********)

(* explode converts a string to a character list *)
let explode (s: string) : char list =
  let rec exp i l =
    if i < 0 then l else exp (i - 1) (s.[i] :: l)
  in
  exp (String.length s - 1) []

(****************)
(* Part 1: NFAs *)
(****************)

 let move (nfa: ('q, 's) nfa_t) (qs: 'q list) (s: 's option) : 'q list =
 List.fold_left(fun acc (s1, opt, s2)-> if elem s1 qs && opt = s then union acc [s2] else acc) [] nfa.delta
 
 
let rec e_closure nfa qs = 
  let e_close_states =union qs (move nfa qs None ) in 
  if e_close_states = qs then union [] e_close_states else e_closure nfa e_close_states
  


  
  
   let accept nfa str = let finals = e_closure nfa [nfa.q0] in 
  let res = List.fold_left(fun acc x-> e_closure nfa (move nfa acc (Some x)))finals (explode str) in List.exists(fun x-> List.mem x nfa.fs)res

(*******************************)
(* Part 2: Subset Construction *)
(*******************************)

let new_states (nfa: ('q,'s) nfa_t) (qs: 'q list) : 'q list list = 
List.fold_left(fun acc x-> union ([e_closure nfa (move nfa qs (Some x))]) acc) [] nfa.sigma

let new_trans (nfa: ('q,'s) nfa_t) (qs: 'q list) : ('q list, 's) transition list = 
List.fold_left(fun acc x-> union ([qs, Some x, e_closure nfa (move nfa qs (Some x))]) acc) [] nfa.sigma

let new_finals (nfa: ('q,'s) nfa_t) (qs: 'q list) : 'q list list =
  List.fold_left(fun acc x-> if elem x nfa.fs then union  [qs] acc else acc) [] qs


let rec nfa_to_dfa_step (nfa: ('q,'s) nfa_t) (dfa: ('q list, 's) nfa_t)
  (work: 'q list list) : ('q list, 's) nfa_t = match work with
  |[[]]->dfa
  |[h :: t]->
  let new_states' = new_states nfa [h] in
  let qs' = union dfa.qs new_states'
  in nfa_to_dfa_step nfa { dfa with qs = qs' } [t]
  |_->dfa
  
  
 let nfa_to_dfa (nfa: ('q,'s) nfa_t) : ('q list, 's) nfa_t =
  let empty_dfa = {sigma=nfa.sigma; qs=[e_closure nfa [nfa.q0]]; q0=e_closure nfa [nfa.q0]; delta = []; fs=[]} in
  let dfa_step = nfa_to_dfa_step nfa empty_dfa [nfa.qs] in
  let dfa_step_filtered = {dfa_step with delta = List.filter(fun(a, _, c) -> a <> [] && c <> []) dfa_step.delta; qs = List.filter(fun q -> q <> []) dfa_step.qs} in
  let final_states = 
    List.fold_left (fun acc x -> 
      List.fold_left (fun acc' q -> if (List.mem x q) then (union [q] acc) else acc') acc dfa_step_filtered.qs
    ) [] nfa.fs in
  let transitions = 
    List.fold_left (fun acc (a, b, c) -> 
      List.fold_left (fun acc' q -> if (List.mem a q) && b <> None then union [(q, b, c)] acc else union acc' acc) acc dfa_step_filtered.qs
    ) [] nfa.delta in
  let final_transitions = 
    List.fold_left (fun acc (a, b, c) -> 
      List.fold_left (fun acc' q -> if (List.mem c q) && b <> None then union [(a, b, q)] acc else union acc' acc) acc dfa_step_filtered.qs
    ) [] transitions in
  {dfa_step_filtered with fs=final_states; delta=final_transitions}


  
