open TokenTypes
open Str

(* Part 1: Lexer - IMPLEMENT YOUR CODE BELOW *)

let rec next_tok input counter =
  if counter >= String.length input then
    []
  else if Str.string_match (Str.regexp "[0-9]+") input counter then
    let matched = Str.matched_string input in 
    let size = String.length (matched) in
    Tok_Int (int_of_string matched) :: next_tok input (counter + size)
  else if Str.string_match (Str.regexp "(-[0-9]+)") input counter then
    let matched = Str.matched_string input in
    let size = String.length matched in
    let str_no_clo=Str.string_before matched (size-1) in 
    let str_no_op = Str.string_after str_no_clo 1 in
    Tok_Int (int_of_string str_no_op) :: next_tok input (counter + size)
  else if Str.string_match (Str.regexp"true") input counter then 
    Tok_Bool(true) :: next_tok input (counter + 4)
  else if Str.string_match (Str.regexp"false") input counter then 
    Tok_Bool(false) :: next_tok input (counter + 5)
  else if Str.string_match (Str.regexp ")") input counter then
    Tok_RParen :: next_tok input (counter + 1)
  else if Str.string_match (Str.regexp "(") input counter then
    Tok_LParen :: next_tok input (counter + 1)
  else if Str.string_match (Str.regexp "=") input counter then
    Tok_Equal :: next_tok input (counter + 1)
  else if Str.string_match (Str.regexp "<>") input counter then
    Tok_NotEqual :: next_tok input (counter + 2)
  else if Str.string_match (Str.regexp"<=") input counter then 
    Tok_LessEqual :: next_tok input (counter + 2)
  else if Str.string_match (Str.regexp">=") input counter then 
    Tok_GreaterEqual :: next_tok input (counter + 2)
  else if Str.string_match (Str.regexp"<") input counter then 
    Tok_Less :: next_tok input (counter + 1) 
  else if Str.string_match (Str.regexp">") input counter then 
    Tok_Greater :: next_tok input (counter + 1)
  else if Str.string_match (Str.regexp "||") input counter then
    Tok_Or :: next_tok input (counter + 2)
  else if Str.string_match (Str.regexp "&&") input counter then
    Tok_And :: next_tok input (counter + 2)
  else if Str.string_match (Str.regexp "\\+") input counter then
    Tok_Add :: next_tok input (counter + 1)
  else if Str.string_match (Str.regexp "\\->") input counter then
    Tok_Arrow :: next_tok input (counter + 2)
  else if Str.string_match (Str.regexp "-") input counter then
    Tok_Sub :: next_tok input (counter + 1)
  else if Str.string_match (Str.regexp "\\*") input counter then
    Tok_Mult :: next_tok input (counter + 1)
  else if Str.string_match (Str.regexp "/") input counter then
    Tok_Div :: next_tok input (counter + 1)
  else if Str.string_match (Str.regexp "\\^") input counter then
    Tok_Concat :: next_tok input (counter + 1)
  else if Str.string_match (Str.regexp ";;") input counter then
    Tok_DoubleSemi :: next_tok input (counter + 2)
  else if Str.string_match (Str.regexp "[a-zA-Z][a-zA-Z0-9]*") input counter then
    let matched=Str.matched_string input in 
    if matched = "not" then
      Tok_Not :: next_tok input (counter + 3)
    else if matched = "if" then
      Tok_If :: next_tok input (counter + 2)
    else if matched = "then" then
      Tok_Then :: next_tok input (counter + 4)
    else if matched = "else" then
      Tok_Else :: next_tok input (counter + 4)
    else if matched = "let" then
      Tok_Let :: next_tok input (counter + 3)
    else if matched = "def" then
      Tok_Def :: next_tok input (counter + 3)
    else if matched = "in" then
    Tok_In :: next_tok input (counter + 2)
    else if matched = "rec" then
      Tok_Rec :: next_tok input (counter + 3)
    else if matched = "fun" then
      Tok_Fun :: next_tok input (counter + 3)
    else
      let size=String.length matched in 
      Tok_ID (matched) :: next_tok input (counter + size)
  else if Str.string_match (Str.regexp"\"[^\"]*\"") input counter then 
  let matched = Str.matched_string input in 
  let size = String.length matched in 
  let str_no_clo = Str.string_before matched (size-1) in 
  let str_no_op = Str.string_after str_no_clo 1 in 
  Tok_String(str_no_op) :: next_tok input (counter+size)
  else if Str.string_match (Str.regexp "[ \t\n]+") input counter then
    next_tok input (counter + String.length (Str.matched_string input))
  else
    raise (InvalidInputException "Fail")



 let tokenize input = 
  next_tok input 0
  
 
