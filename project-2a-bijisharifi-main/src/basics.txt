open Funs

(***********************************)
(* Part 1: Non-Recursive Functions *)
(***********************************)

let rev_tup (a, b, c) = (c, b, a)

let is_even x = x mod 2=0

let area (a,b) (c,d) = 
let p1 = d - b in let p2= 
c - a in let abs1= 
abs p1 in let abs2=
abs p2 in 
abs1 * abs2

(*******************************)
(* Part 2: Recursive Functions *)
(*******************************)

let rec fibonacci n = if n=1 then 1 else 
if n=0 then 0 else
fibonacci(n-1) + fibonacci(n-2)

let rec pow x p = if p=0 then 1 else
if p=1 then x else 
x * pow x (p-1)

let is_prime n =
if n <= 1 then false
else let rec is_divisible k =
if k * k > n then true
else if n mod k = 0 then false
else is_divisible (k+1)
in is_divisible 2 

let rec maxFuncChain init funcs= match funcs with
|[]->init
|h::t-> let value1= maxFuncChain (h init) t in let 
value2= maxFuncChain init t in if value1 > value2 then 
value1 else value2

(*****************)
(* Part 3: Lists *)
(*****************)

let rec reverse lst = match lst with
| []->[]
| x::xs->(reverse xs) @ [x]

let rec merge lst1 lst2 = match lst1, lst2 with
| [], _ ->lst2
| _, [] -> lst1
| x::xs, y::ys-> if x<=y then x:: merge xs lst2
else y :: merge lst1 ys

let rec reverse_list acc = function
  | [] -> acc
  | hd::tl -> reverse_list (hd::acc) tl

let rec is_palindrome_helper left right =
match left, right with
| [], [] -> true
| [], _ | _, [] -> false
| hd1::tl1, hd2::tl2 -> hd1 = hd2 && is_palindrome_helper tl1 tl2

let is_palindrome lst = is_palindrome_helper lst (reverse_list [] lst)

let rec jumping_tuples_helper lst1 lst2 a = match lst1, lst2 with
| _, []-> []
| [], _->[]
| (x, _) :: xs , (_, y) :: ys-> if a mod 2 = 0 then
y :: jumping_tuples_helper xs ys (a+1) else
x :: jumping_tuples_helper xs ys (a+1)    

let jumping_tuples lst1 lst2=
jumping_tuples_helper lst1 lst2 0




let rec flatten lst = match lst with
| []->[]
| h::t -> h @ flatten t

let rec square_primes lst = match lst with
| [] -> []
| x::xs -> if is_prime x then (x, x * x) :: square_primes xs else square_primes xs

let rec partition p lst = match lst with
| [] -> ([], [])
| h :: t ->
let (l1, l2) = partition p t in
if p h then
(h :: l1, l2)
else
(l1, h :: l2)

(*****************)
(* Part 4: HOF *)
(*****************)

let is_present lst x = map (fun y-> if y = x then 1 else 0 ) lst

let count_occ lst target = fold (fun a y-> if y = target then a+1 else a) 0 lst

let uniq lst = let f x acc =
 if fold_right (fun y z -> x = y || z) acc false then acc
 else x::acc in fold_right f lst [] 
