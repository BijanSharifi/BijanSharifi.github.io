
type 'a tree =
  | Node of 'a tree * 'a * 'a tree
  | Leaf

let rec tree_fold f init tree=
match tree with
|Leaf->init
|Node(l, v, r)->let l'=tree_fold f init l in let r'=tree_fold f init r
in f l' v r'

let map tree f = tree_fold(fun l v r->Node(l, f v, r)) Leaf tree

let mirror tree = tree_fold(fun l v r-> Node(r, v, l)) Leaf tree

let in_order tree = tree_fold(fun l v r-> l @ [v] @ r) [] tree

let pre_order tree =tree_fold(fun l v r-> v :: l @ r) [] tree

let compose tree = tree_fold(fun l v r-> fun x-> r ( v (l x))) (fun x->x) tree

let depth tree=tree_fold(fun l _ r->1+ max l r) 0 tree

(* Assume complete tree *)
let trim tree n= match tree with 
|Leaf->Leaf
|Node(l, v, r)->if n=1 then Node(Leaf, v, Leaf) else if n>= depth tree then tree else Node(l, v, r)


let rec split lst v= match lst with 
|[]->([], [])
|[h]->([], [])
|h :: t :: l-> if h = v then ([], t :: l) else if t = v then ([h], l) else split l v


let rec from_pre_in pre in_ord= match pre with
|[]->Leaf
|[h]->Node(Leaf, h, Leaf)
|h :: t-> let root = h in 
let (leftIn, rightIn) = split in_ord root in 
let (empty, subPre)=split pre root in 
let (leftPR, rightPR)=List.fold_left(fun (left, right) el-> if List.mem el leftIn then (el :: left, right) else (left, el :: right)) ([],[]) subPre in 
let leftP=List.rev leftPR in 
let rightP=List.rev rightPR in 
Node(from_pre_in leftP leftIn, root, from_pre_in rightP rightIn)
